#pragma warning(disable: 4996)
#include "stdio.h"
#define scanf scanf_s
#include "locale.h"

#include "stdlib.h"

#include "string.h"

#define PERESADKA_MIN 16

#define PERESADKA_HOUR 0

typedef struct // Создание структуры

{

	char whence[100];

	char where[100];

	int flight_time_hour;

	int flight_time_min;

	int transfer_time_hour;

	int transfer_time_min;

	int value;

} avia;

avia reys() //считывание из консоли нового элемента

{

	int flag = 0;

	avia flight;

	int i = 0;

	printf("\nОткуда: ");

	scanf("%s", &flight.whence,100); //начало Считывание из файла конец начало Вывод в файл конец

		printf("\nКуда: ");

	scanf("%s", &flight.where,100);

	printf("\nВремя полета: ");

	scanf("%d:%d", &flight.flight_time_hour, &flight.flight_time_min);

	if (((flight.flight_time_hour > 15) || (flight.flight_time_hour < 0) || (flight.flight_time_min > 59) || (flight.flight_time_min < 0)))

		flag = 1;

	if (flag != 1)printf("\nВремя вылета: ");

	scanf("%d:%d", &flight.transfer_time_hour, &flight.transfer_time_min);

	if (((flight.transfer_time_hour > 24) || (flight.transfer_time_hour < 0) || (flight.transfer_time_min > 59) || (flight.transfer_time_min < 0)))

		flag = 1;

	if (flag != 1)printf("\nЦена: ");

	scanf("%d", &flight.value);

	if (flight.value < 0)

		flag = 1;

	if (flag == 1)

	{

		printf("\n\aВведены некорректные данные. Повторите ввод\n ");

		flight.value = -1;

	}

	return flight;

}

void in(FILE *f, avia *flight, int *size) //вывод в файл

{

	fread(size, sizeof(int), 1, f);

	fread(flight, sizeof(avia), *size, f);

}

void out(FILE *f, avia *flight, int size) //вывод в файл

{

	fwrite(&size, sizeof(int), 1, f);

	fwrite(flight, sizeof(avia), size, f);

}

int main()

{

	FILE *f;

	avia flights[100];

	char whence[100];

	char where[100];

	char peresadka[100];

	int otpravka[100];

	int pributie[100];

	int kolvo = 0;

	int time_hour, time_min;

	int takeoff_hour, takeoff_min, landing_hour, landing_min;

	int min_time_hour, min_time_min;

	int min_value;

	int reysi_est;

	int size = 0, i, j;

	setlocale(LC_ALL, "");

	fopen_s(&f, "f.cxc", "rb");

	if (f)

	{

		in(f, flights, &size);

		fclose(f);

	}

	fopen_s(&f, "f.cxc", "wb");

	while (1)

	{

		printf("Введите:\n|1| - если хотите добавить рейс\n");

		printf("|2| - если хотите редактировать данные\n");

		printf("|3| - если хотите удалить рейс\n");

		printf("|4| - если хотите подобрать маршрут с наименьшим временем ожидания при пересадке\n");

		printf("|5| - если хотите подобрать маршрут с наименьшей стоимостью\n");

		printf("|6| - если хотите вывести список всех рейсов\n");

		printf("|0| - если хотите выйти\n>");

		scanf("%d", &i);

		rewind(stdin);

		switch (i)

		{

		case 1:

			do

			{

				flights[size] = reys();

				rewind(stdin);

				printf("\n");

			} while (flights[size].value == -1);

			size++;

			break;

		case 2:

			if (size > 0)

			{

				printf("\nРедактирование записи\n");

				printf("\n№ Откуда\t\t\tКуда\t\t\tВремя полета\t\tВремя вылета\t\tЦена\n\n");

				for (i = 0; i < size; i++)

					printf("%d) %-29s%-27s%2d:%02d\t\t %02d:%02d%20d\n", i, flights[i].whence, flights[i].where, flights[i].flight_time_hour, flights[i].flight_time_min, flights[i].transfer_time_hour, flights[i].transfer_time_min, flights[i].value);

				printf("\nУкажите номер рейса: ");

				scanf("%d", &i);

				if (i < size)

				{

					do

					{

						flights[i] = reys();

						rewind(stdin);

					} while (flights[i].value == -1);

				}

				else

					printf("\n\aТакого рейса нет\n");

				printf("\n");

			}

			else

				printf("\n\aБаза пуста\n\n");

			break;

		case 3:

			if (size > 0)

			{

				printf("\nУдаление записи\n");

				printf("\n№ Откуда\t\t\tКуда\t\t\tВремя полета\t\tВремя вылета\t\tЦена\n\n");

				for (i = 0; i < size; i++)

					printf("%d) %-29s%-27s%2d:%02d\t\t %02d:%02d%20d\n", i, flights[i].whence, flights[i].where, flights[i].flight_time_hour, flights[i].flight_time_min, flights[i].transfer_time_hour, flights[i].transfer_time_min, flights[i].value);

				printf("\nУкажите номер рейса: ");

				scanf("%d", &i);

				if (i < size)

				{

					--size;

					for (; i < size; i++)

						flights[i] = flights[i + 1];

				}

				else

					printf("\n\aТакого рейса нет\n");

				printf("\n");

			}

			else

				printf("\n\aБаза пуста\n\n");

			break;

		case 4:

			printf("\nОткуда: ");

			scanf("%s", &whence,100);

			printf("\nКуда: ");

			scanf("%s", &where,100);

			min_time_hour = min_time_min = INT_MAX;

			kolvo = 0;

			reysi_est = 0;

			for (i = 0; i < size; i++)

			{

				if ((!strcmp(whence, flights[i].whence)) && (!strcmp(where, flights[i].where)))

				{

					printf("\nПрямой: %s - %s\n\tВремя полета: %d:%02d\n\tВылет в: %02d:%02d\n\tСтоимость: %d\n", flights[i].whence, flights[i].where, flights[i].flight_time_hour, flights[i].flight_time_min, flights[i].transfer_time_hour, flights[i].transfer_time_min, flights[i].value);

					min_time_hour = min_time_min = 0;

					reysi_est = 1;

					kolvo = 0;

					continue;

				}

				if (!strcmp(whence, flights[i].whence))

				{

					strcpy(peresadka, flights[i].where);

					for (j = 0; j < size; j++)

					{

						if ((!strcmp(peresadka, flights[j].whence)) && (!strcmp(where, flights[j].where)))

						{

							time_hour = flights[j].transfer_time_hour - (flights[i].transfer_time_hour + flights[i].flight_time_hour);

							time_min = flights[j].transfer_time_min - (flights[i].transfer_time_min + flights[i].flight_time_min);

							if (time_min < 0)

							{

								time_min += 60;

								time_hour--;

							}

							if (time_hour < 0)

								time_hour += 24;

							if ((time_hour < min_time_hour) && ((time_min >= PERESADKA_MIN) || (time_hour > PERESADKA_HOUR)))

							{

								min_time_hour = time_hour;

								min_time_min = time_min;

								kolvo = 0;

								otpravka[kolvo] = i;

								pributie[kolvo] = j;

								kolvo++;

								reysi_est = 1;

								continue;

							}

							if ((time_hour == min_time_hour) && ((time_min >= PERESADKA_MIN) || (time_hour > PERESADKA_HOUR)))

							{

								if (time_min < min_time_min)

								{

									min_time_min = time_min;

									kolvo = 0;

									otpravka[kolvo] = i;

									pributie[kolvo] = j;

									kolvo++;

									reysi_est = 1;

									continue;

								}

								if (time_min == min_time_min)

								{

									otpravka[kolvo] = i;

									pributie[kolvo] = j;

									kolvo++;

								}

							}

						}

					}

				}

			}

			if (reysi_est == 1)

			{

				if (kolvo > 0)

				{

					printf("\nМаршрут: %s - %s\n", whence, where);

					printf("Минимальное время пересадки = %d:%d\n", min_time_hour, min_time_min);

					for (i = 0; i < kolvo; i++)

					{

						if (kolvo > 1)

							printf(" Вариант %d\n", (i + 1));

						if ((takeoff_min = flights[otpravka[i]].transfer_time_min + flights[otpravka[i]].flight_time_min) > 59)

						{

							takeoff_min -= 60;

							takeoff_hour++;

						}

						if ((landing_min = flights[pributie[i]].transfer_time_min + flights[pributie[i]].flight_time_min) > 59)

						{

							landing_min -= 60;

							landing_hour++;

						}

						(takeoff_hour >= 24) ? (takeoff_hour -= 24) : 0;

						(landing_hour >= 24) ? (landing_hour -= 24) : 0;

						printf("\t%s - %s\t|\tВылет в %02d:%02d\t|\tПосадка в %02d:%02d\n", flights[otpravka[i]].whence, flights[otpravka[i]].where, flights[otpravka[i]].transfer_time_hour, flights[otpravka[i]].transfer_time_min, takeoff_hour, takeoff_min);

						printf("\t%s - %s\t|\tВылет в %02d:%02d\t|\tПосадка в %02d:%02d\n", flights[pributie[i]].whence, flights[pributie[i]].where, flights[pributie[i]].transfer_time_hour, flights[pributie[i]].transfer_time_min, landing_hour, landing_min);

						printf("\tCуммарная стоимость: %d\n", (flights[otpravka[i]].value + flights[pributie[i]].value));

						if ((takeoff_hour = flights[otpravka[i]].flight_time_hour + flights[pributie[i]].flight_time_hour) > 59)

						{

							takeoff_min -= 60;

							takeoff_hour++;

						}

						if ((landing_min = flights[otpravka[i]].flight_time_min + flights[pributie[i]].flight_time_min) > 59)

						{

							landing_min -= 60;

							landing_hour++;

						}
						printf("\tCуммарное время полета: %d %d\n", takeoff_hour, landing_hour);

					}

				}

			}

			else

				printf("\aМаршрутов между выбранными городами нет\n");

			printf("\n");

			break;

case 5:

	printf("\nОткуда: ");

	scanf("%s", &whence,100);

	printf("\nКуда: ");

	scanf("%s", &where,100);

	min_value = INT_MAX;

	kolvo = 0;

	for (i = 0; i < size; i++)

	{

		if ((!strcmp(whence, flights[i].whence)) && (!strcmp(where, flights[i].where)) && ((flights[i].value <= min_value)))

		{

			(flights[i].value < min_value) ? (kolvo = 0) : 0;

			min_value = flights[i].value;

			otpravka[kolvo] = i;

			kolvo++;

		}

	}

	if (kolvo > 0)

		printf("\nМинимальная стоимость: %d\n", min_value);

	else

		printf("\n\aРейсов между выбранными городами нет\n");

	for (i = 0; i < kolvo; i++)

	{

		landing_hour = flights[otpravka[i]].transfer_time_hour + flights[otpravka[i]].flight_time_hour;

		if ((landing_min = flights[otpravka[i]].transfer_time_min + flights[otpravka[i]].flight_time_min) > 59)

		{

			landing_min -= 60;

			landing_hour++;

		}

		(landing_hour >= 24) ? (landing_hour -= 24) : 0;

		printf("\t%s - %s\t|\tВылет в: %02d:%02d\t|\tПосадка в: %02d:%02d\n", flights[otpravka[i]].whence, flights[otpravka[i]].where, flights[otpravka[i]].transfer_time_hour, flights[otpravka[i]].transfer_time_min, landing_hour, landing_min);

	}

	printf("\n");

	break;

case 6:

	if (size > 0)

	{

		printf("\n№ Откуда\t\t\tКуда\t\t\tВремя полета\t\tВремя вылета\t\tЦена\n\n");

		for (i = 0; i < size; i++)

			printf("%d) %-29s%-27s%2d:%02d\t\t %02d:%02d%20d\n", i, flights[i].whence, flights[i].where, flights[i].flight_time_hour, flights[i].flight_time_min, flights[i].transfer_time_hour, flights[i].transfer_time_min, flights[i].value);

	}

	else

		printf("\n\aБаза пуста\n");

	printf("\n");

	break;

case 0:

	out(f, flights, size);

	fclose(f);

	return 0;

default:

	printf("\n\aВведена неизвестная команда\n\n");

	rewind(stdin);

	break;

}

rewind(stdin);

}

}
